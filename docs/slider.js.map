{"version":3,"sources":["src/model.ts","src/subView/subViewSliderLine.ts","src/subView/subViewHandlers.ts","src/subView/subViewIcons.ts","src/subView/subViewInput.ts","src/subView/subViewScale.ts","src/view.ts","src/presenter.ts","slider.ts"],"names":[],"mappings":"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","file":"slider.js","sourceRoot":"..","sourcesContent":["'use strict';\r\nimport{IOptions} from './presenter';\r\n\r\nexport default class Model  {\r\n    minValue: number;\r\n    maxValue: number;\r\n    step: number;\r\n    stepsAmount: number;\r\n    range: boolean;\r\n    handlersAmount: number;\r\n    icon: boolean;\r\n    input: boolean;\r\n    valueRange: number;\r\n    positionValueRate: number;\r\n    currentValue: number[];\r\n    rangeValue: number;\r\n\r\n    constructor (options:IOptions) {\r\n    this.minValue = options.minValue,\r\n    this.maxValue = options.maxValue,\r\n    this.step = options.step,\r\n    this.range = options.range,\r\n    this.handlersAmount = options.handlersAmount,\r\n    this.icon = options.icon,\r\n    this.input = options.input,\r\n    this.valueRange = Math.abs(options.maxValue - options.minValue),\r\n    this.stepsAmount = Math.floor(this.valueRange / this.step),\r\n    this.positionValueRate,\r\n    this.currentValue = [],\r\n    this.getInitialCurrentValue(options),\r\n    this.rangeValue = Math.abs(this.currentValue[1] - this.currentValue[0])\r\n    }\r\n\r\n    getInitialCurrentValue = (options:IOptions):void => {\r\n        for (let i = 0; i < options.handlersAmount; i++){\r\n            this.currentValue[i] = options.startingValue[i];\r\n        }\r\n    }\r\n\r\n    getRangeValue = (options:IOptions):void => {\r\n        if (options.range){\r\n            this.rangeValue = Math.abs(this.currentValue[1] - this.currentValue[0]);\r\n        }\r\n    }\r\n\r\n    // getNumberOfSteps = () => {\r\n    //     let stepsAmount: number = this.valueRange / this.step;\r\n    // }\r\n}","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewSliderLine  {\r\n    createSliderLine = (sliderContainer:HTMLDivElement, options:IOptions):HTMLDivElement => {\r\n        const sliderLine:HTMLDivElement = document.createElement('div');\r\n        sliderLine.classList.add('slider__slider');\r\n        if (options.vertical) {\r\n            sliderLine.classList.add('slider__slider_vertical');\r\n        }\r\n        sliderContainer.append(sliderLine);\r\n        let slider:HTMLDivElement = sliderContainer.querySelector('.slider__slider');\r\n        this.addSliderListener(slider);\r\n        return slider;\r\n    }\r\n\r\n    addSliderListener = (slider:HTMLDivElement):void => {\r\n        slider.onclick = (e):void => {\r\n            this.sliderClick(e);\r\n        }\r\n    }\r\n\r\n    sliderClick: any;\r\n} \r\n\r\n\r\n","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewHandlers  {\r\n    createHandlers(options:IOptions, slider:HTMLDivElement):NodeListOf<HTMLDivElement> {\r\n        for (let i = 0; i < options.handlersAmount; i++){\r\n            const handler:HTMLDivElement = document.createElement('div');\r\n            handler.classList.add('slider__handler');\r\n            if (options.vertical) {\r\n                handler.classList.add('slider__handler_vertical');\r\n            } else{\r\n                handler.classList.add('slider__handler_horisontal');\r\n            }\r\n            slider.append(handler);\r\n        }\r\n        let handlers:NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__handler');\r\n        this.addHandlerListeners(handlers);\r\n        return handlers;\r\n    }\r\n\r\n    getInitialHandlersPosition = (handlers:NodeListOf<HTMLDivElement>, options:IOptions):number[] => {\r\n        let handlersPosition:number[] = [];\r\n        for (let i = 0; i < handlers.length; i++){\r\n            if(options.vertical){\r\n                let handlerPosition:number = handlers[i].getBoundingClientRect().y;\r\n                handlersPosition[i] = handlerPosition;\r\n            } else {\r\n                let handlerPosition:number = handlers[i].getBoundingClientRect().x;\r\n                handlersPosition[i] = handlerPosition;\r\n            }\r\n        }\r\n        return handlersPosition;\r\n    }\r\n\r\n    addHandlerListeners = (handlers:NodeListOf<HTMLDivElement>):void => {\r\n        handlers[0].onmousedown = (e):void => {\r\n            this.handlerMouseDown(e, handlers[0], 0);\r\n        }\r\n        if(handlers[1]){\r\n            handlers[1].onmousedown = (e):void => { \r\n                this.handlerMouseDown(e, handlers[1], 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlerMouseDown: any;\r\n    \r\n}   \r\n","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewIcons  {\r\n    createIcons(options:IOptions, handlers:NodeListOf<HTMLDivElement>, slider:HTMLDivElement):NodeListOf<HTMLDivElement> {\r\n        for (let i = 0; i < handlers.length; i++){\r\n            const icon:HTMLDivElement = document.createElement('div');\r\n            icon.classList.add('slider__icon');\r\n            if (options.vertical) {\r\n                icon.classList.add('slider__icon_vertical');\r\n            } else{\r\n                icon.classList.add('slider__icon_horisontal');\r\n            }\r\n            handlers[i].append(icon);\r\n        }\r\n        let icons:NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__icon'); \r\n        return icons;     \r\n    } \r\n}   ","import { IOptions } from \"../presenter\";\r\n\r\nexport  default class SubViewInput  {\r\n    \r\n    createInputsContainer(options:IOptions, slider:HTMLDivElement, sliderContainer:HTMLDivElement):HTMLDivElement {\r\n        let _container:HTMLDivElement = document.createElement('div');\r\n        _container.classList.add('slider__inputsContainer');\r\n        slider.before(_container);\r\n        let inputsContainer:HTMLDivElement = sliderContainer.querySelector('.slider__inputsContainer');\r\n        return inputsContainer;\r\n    }\r\n\r\n    createRangeInput (options:IOptions, inputsContainer:HTMLDivElement): HTMLInputElement {\r\n        let rangeInput:HTMLInputElement = document.createElement('input');\r\n        rangeInput.setAttribute('type', 'text')\r\n        rangeInput.classList.add('slider__input', 'slider__input_range');\r\n        inputsContainer.append(rangeInput);\r\n        let inputLabel:HTMLElement = document.createElement('span');\r\n        inputLabel.classList.add('slider__label');\r\n        inputLabel.innerText = 'range';\r\n        rangeInput.before(inputLabel);\r\n        let input:HTMLInputElement = inputsContainer.querySelector('.slider__input_range');\r\n        return input;\r\n    }\r\n\r\n    createValueInputs (options:IOptions, inputsContainer:HTMLDivElement):NodeListOf<HTMLInputElement>{\r\n        if(options.valueInputs){\r\n            for (let i = 0; i < +options.handlersAmount; i++){\r\n                let valueInput:HTMLInputElement = document.createElement('input');\r\n                valueInput.setAttribute('type', 'text')\r\n                valueInput.classList.add('slider__input', 'slider__input_value');\r\n                inputsContainer.append(valueInput);\r\n                let inputLabel:HTMLElement = document.createElement('span');\r\n                inputLabel.classList.add('slider__label');\r\n                inputLabel.innerText = `value ${i+1}`;\r\n                valueInput.before(inputLabel);\r\n            }\r\n            let inputs:NodeListOf<HTMLInputElement> = inputsContainer.querySelectorAll('.slider__input_value');\r\n            this.addInputsListener(inputs);\r\n            return inputs;\r\n        }\r\n    }\r\n\r\n    addInputsListener = (inputs:NodeListOf<HTMLInputElement>):void => {\r\n        inputs.forEach (\r\n            input => {\r\n                input.onclick = ():void => {\r\n                input.value = '';\r\n                input.addEventListener('keydown',  (e) => {\r\n                    if (e.code == 'Enter'){\r\n                        let newInputValue:number = Number(input.value);\r\n                        if (e.target == inputs[0]){\r\n                            this.newInputValue(newInputValue, 0);\r\n                        }\r\n                        else{\r\n                            this.newInputValue(newInputValue, 1);\r\n                        }\r\n                    }                \r\n                })\r\n            }}\r\n        )      \r\n    }\r\n\r\n    newInputValue:any;\r\n}\r\n","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewScale  {\r\n    createScale = (options:IOptions, slider:HTMLDivElement):NodeListOf<HTMLDivElement> => {\r\n        let pointsAmount: number = Math.ceil((options.maxValue - options.minValue) / options.step) + 1;\r\n        for (let i = 0; i < pointsAmount; i++){\r\n            const scalePoint:HTMLDivElement = document.createElement('div');\r\n            scalePoint.classList.add('slider__scale-point');\r\n            if (options.vertical) {\r\n                scalePoint.classList.add('slider__scale-point_vertical');\r\n            } else{\r\n                scalePoint.classList.add('slider__scale-point_horisontal');\r\n            }\r\n            slider.append(scalePoint);\r\n        }\r\n        let scalePoints:NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__scale-point');\r\n        // this.addScaleListener(scalePoints);\r\n        return scalePoints;\r\n    }\r\n\r\n    addScaleListener = (scalePoints:NodeListOf<HTMLDivElement>):void => {\r\n        scalePoints.forEach(point => {\r\n            point.onclick = (e):void => {\r\n                this.scalePpointClick(e);\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    scalePpointClick: any;\r\n}","'use strict';\r\nimport SubViewSliderLine from './subView/subViewSliderLine';\r\nimport SubViewHandlers from './subView/subViewHandlers';\r\nimport SubViewIcons from './subView/subViewIcons';\r\nimport SubViewInput from './subView/subViewInput';\r\nimport {IOptions} from './presenter';\r\nimport SubViewScale from './subView/subViewScale';\r\n\r\nexport class View {\r\n    options: IOptions;\r\n    subViewSliderLine: SubViewSliderLine;\r\n    subViewHandlers: SubViewHandlers;\r\n    subViewScale: SubViewScale;\r\n    subViewIcons: SubViewIcons;\r\n    subViewInput: SubViewInput;\r\n    sliderContainer:HTMLDivElement;\r\n    slider: HTMLDivElement;\r\n    handlers: NodeListOf<HTMLDivElement>;\r\n    scale: NodeListOf<HTMLDivElement>;\r\n    icons: NodeListOf<HTMLDivElement>;\r\n    inputsContainer: HTMLDivElement;\r\n    rangeInput:HTMLInputElement;\r\n    valueInputs: NodeListOf<HTMLInputElement>;\r\n    sliderPosition: number;\r\n    sliderBorder: number;\r\n    handlersHeight: number;\r\n    handlersWidth: number;\r\n    maxPosition: number;\r\n    minPosition: number;\r\n    positionRange: number;\r\n    handlersPosition: number[];\r\n    range: HTMLDivElement;\r\n\r\n\r\n    constructor (options:IOptions, container:HTMLDivElement){\r\n        this.options = options;\r\n        this.subViewSliderLine = new SubViewSliderLine;\r\n        this.subViewHandlers = new SubViewHandlers;\r\n        this.subViewScale = new SubViewScale;\r\n        this.subViewIcons = new SubViewIcons;\r\n        this.subViewInput = new SubViewInput;\r\n        this.createSlider(options, container);\r\n        this.getSliderData();\r\n        this.getScalePosition();\r\n        this.subViewHandlers.handlerMouseDown = (e:MouseEvent, handler:HTMLDivElement, num:number):void => {\r\n            this.moveByMouse(e, handler, num);\r\n        }\r\n        this.subViewInput.newInputValue = (newInputValue:number, num:number):void => {\r\n            this.notifyChangedInputValue(newInputValue, num);\r\n        }\r\n        this.subViewSliderLine.sliderClick = (e:MouseEvent):void => {\r\n            if (e.target !== this.handlers [0] && e.target !== this.handlers [1]) {\r\n                // console.log (e.target);\r\n                this.moveByClick(e);\r\n            }\r\n        }\r\n        // this.subViewScale.scalePpointClick = (e:MouseEvent):void =>{\r\n        //     this.moveByClick(e);\r\n        // }\r\n    }\r\n\r\n    createSlider = (options:IOptions, container:HTMLDivElement):void => {\r\n        this.sliderContainer = this.createContainer(options, container);\r\n        this.slider = this.subViewSliderLine.createSliderLine(this.sliderContainer, options);\r\n        this.handlers = this.subViewHandlers.createHandlers(options, this.slider);\r\n        if (this.options.scale) {\r\n            this.scale = this.subViewScale.createScale(options, this.slider);\r\n        }\r\n        if (this.options.icon) {\r\n            this.icons = this.subViewIcons.createIcons(options, this.handlers, this.slider);\r\n        }\r\n        if(this.options.rangeInput || this.options.valueInputs){\r\n            this.inputsContainer = this.subViewInput.createInputsContainer(options, this.slider, this.sliderContainer);\r\n            if (this.options.rangeInput && this.options.handlersAmount > 1){\r\n                this.rangeInput = this.subViewInput.createRangeInput(options, this.inputsContainer);\r\n            }       \r\n            if(this.options.valueInputs){\r\n            this.valueInputs = this.subViewInput.createValueInputs(options, this.inputsContainer);\r\n            }\r\n        }    \r\n    }\r\n\r\n    createContainer = (options:IOptions, container:HTMLElement):HTMLDivElement => {\r\n        const _cont:HTMLDivElement = document.createElement('div');\r\n        _cont.classList.add('slider__container');\r\n        if (options.vertical) {\r\n            _cont.classList.add('slider__container_vertical');\r\n        }\r\n        else {\r\n            _cont.classList.add('slider__container_horisontal');\r\n        }\r\n        container.append(_cont);\r\n        let sliderContainer:HTMLDivElement = container.querySelector('.slider__container');\r\n        return sliderContainer;\r\n    }\r\n\r\n    getSliderData = ():void => {\r\n        if (this.options.vertical){\r\n            this.sliderPosition = this.slider.getBoundingClientRect().y + pageYOffset;\r\n            this.sliderBorder = parseFloat(getComputedStyle(this.slider).borderLeftWidth);\r\n            this.handlersHeight = this.handlers[0].offsetHeight;\r\n            this.maxPosition = this.sliderPosition - this.handlersHeight/2;\r\n            this.minPosition = this.maxPosition + this.slider.getBoundingClientRect().height;\r\n            this.positionRange = (this.minPosition - this.maxPosition);\r\n            this.handlersPosition = this.subViewHandlers.getInitialHandlersPosition(this.handlers, this.options);\r\n            this.range = this.showRange(this.options);\r\n            \r\n        } else {\r\n            this.sliderPosition = this.slider.getBoundingClientRect().x + pageXOffset;\r\n            this.handlersWidth = this.handlers[0].offsetWidth;\r\n            console.log(this.slider.getBoundingClientRect());\r\n            this.sliderBorder = parseFloat(getComputedStyle(this.slider).borderLeftWidth);\r\n            this.minPosition = this.sliderPosition - this.handlersWidth/2;\r\n            this.maxPosition = this.minPosition + this.slider.getBoundingClientRect().width;\r\n            this.positionRange = (this.maxPosition - this.minPosition);\r\n            this.handlersPosition = new SubViewHandlers().getInitialHandlersPosition(this.handlers, this.options);\r\n            this.range = this.showRange(this.options);\r\n        }\r\n    }\r\n\r\n    getScalePosition = (): void => {\r\n        const posToVal: number = this.positionRange / Math.abs((this.options.maxValue - this.options.minValue));\r\n        for (let i = 0; i < this.scale.length; i++){\r\n            if (this.options.vertical) {\r\n                if (i == 0) {\r\n                    this.scale[i].style.top = this.positionRange + 'px';\r\n                }\r\n                else if (i == this.scale.length - 1){\r\n                    this.scale[i].style.top = 0 + 'px';\r\n                }\r\n                else {\r\n                    this.scale[i].style.top = this.positionRange - (i * posToVal * this.options.step)  + 'px';\r\n                }    \r\n            } else {\r\n                if (i == 0) {\r\n                    this.scale[i].style.left = 0 + 'px';\r\n                }\r\n                else if (i == this.scale.length - 1){\r\n                    this.scale[i].style.left = this.positionRange + 'px';\r\n                }\r\n                else {\r\n                    this.scale[i].style.left = (i * posToVal * this.options.step)  + 'px';\r\n                }    \r\n            }\r\n        }\r\n    }\r\n\r\n    showRange = (options:IOptions):HTMLDivElement => {\r\n        if (this.options.range){\r\n           let rangeBlock:HTMLDivElement = document.createElement('div');\r\n           rangeBlock.classList.add('slider__range');\r\n           if (options.vertical){\r\n                rangeBlock.style.width = this.slider.getBoundingClientRect().width + 2 + 'px';\r\n                rangeBlock.style.left = -1 + 'px';\r\n           } \r\n           else {\r\n                rangeBlock.style.height = this.slider.getBoundingClientRect().height + 2 + 'px';\r\n                rangeBlock.style.top = -1 + 'px';\r\n           }\r\n           this.slider.append(rangeBlock);\r\n           let range:HTMLDivElement = this.slider.querySelector('.slider__range');\r\n           this.getSliderRangePosition(options, range);\r\n           return range;\r\n        }\r\n    }\r\n\r\n    getSliderRangePosition = (options:IOptions, rangeBlock:HTMLDivElement):void => {\r\n        if (options.vertical){\r\n            if (this.handlersPosition[0] > this.handlersPosition[1]) {\r\n                rangeBlock.style.top = this.handlers[1].offsetTop + this.handlers[1].offsetHeight/2 + 'px';\r\n            }\r\n            else {\r\n                rangeBlock.style.top = this.handlers[0].offsetTop + this.handlers[0].offsetHeight/2 + 'px';\r\n            }\r\n            rangeBlock.style.height = Math.abs(this.handlersPosition[1] - this.handlersPosition[0]) + 'px';\r\n       } \r\n       else {\r\n            if (this.handlersPosition[0] > this.handlersPosition[1]) {\r\n                rangeBlock.style.left = this.handlers[1].offsetLeft + this.handlers[1].offsetWidth/2 + 'px';\r\n            }\r\n            else {\r\n                rangeBlock.style.left = this.handlers[0].offsetLeft + this.handlers[0].offsetWidth/2 + 'px';\r\n            }\r\n            rangeBlock.style.width = (Math.abs(this.handlersPosition[1] - this.handlersPosition[0])) + 'px';\r\n       }\r\n    }\r\n  \r\n    moveByMouse = (e:MouseEvent, handler:HTMLDivElement, num:number): void => {\r\n        e.preventDefault();\r\n        let shiftX:number;\r\n        if(this.options.vertical){\r\n            shiftX = e.clientY - this.handlersPosition[num];\r\n        }\r\n        else{\r\n            shiftX = e.clientX - this.handlersPosition[num];\r\n        }\r\n        handler.classList.add('slider__handler_active');\r\n        document.onmousemove = (e:MouseEvent):void => {\r\n            if(this.options.vertical){\r\n                let newTop: number = e.clientY  - shiftX - this.sliderPosition;\r\n                if (newTop <= (this.maxPosition - this.sliderPosition)) {\r\n                    newTop = this.maxPosition - this.sliderPosition;\r\n                }\r\n                if (newTop >= this.minPosition - this.sliderPosition) {\r\n                    newTop = this.minPosition - this.sliderPosition;\r\n                }\r\n                handler.style.top = newTop  + 'px';\r\n                this.writeNewPosition(handler, num);\r\n            }\r\n            else {\r\n                let newLeft = e.clientX  - shiftX - this.sliderPosition;\r\n                if (newLeft <= (this.minPosition - this.sliderPosition)) {\r\n                    newLeft = this.minPosition - this.sliderPosition;\r\n                }\r\n                if (newLeft >= this.maxPosition - this.sliderPosition) {\r\n                    newLeft = this.maxPosition - this.sliderPosition;\r\n                }\r\n                handler.style.left = newLeft + 'px';\r\n                this.writeNewPosition(handler, num);\r\n            }\r\n        }\r\n        document.onmouseup = ():void => {\r\n            handler.classList.remove('slider__handler_active');\r\n            document.onmousemove = null;\r\n          };\r\n    }\r\n    \r\n    writeNewPosition = (handler:HTMLDivElement, num: number):void => {\r\n        let newPosition: number;\r\n        if(this.options.vertical){\r\n            newPosition = handler.getBoundingClientRect().y + pageYOffset;\r\n        }\r\n        else {\r\n            newPosition = handler.getBoundingClientRect().x + pageXOffset;\r\n        }\r\n        this.handlersPosition[num] = newPosition;\r\n        if(this.options.range){\r\n            this.getSliderRangePosition(this.options, this.range);\r\n        }\r\n        this.notifyChangedHandlerPosition();\r\n    }\r\n\r\n    notifyChangedHandlerPosition: any;\r\n\r\n    notifyChangedInputValue: any; \r\n\r\n    moveByClick = (e:MouseEvent) =>{\r\n        let clickPosition;\r\n        if (this.options.vertical) {\r\n            clickPosition = e.clientY;\r\n        }\r\n        else {\r\n            clickPosition = e.clientX ;\r\n        }\r\n        let handlerToMove;\r\n        if (this.options.handlersAmount == 2) {\r\n            handlerToMove = this.getNearestHandler(clickPosition);\r\n        }\r\n        else {\r\n            handlerToMove = this.handlers[0];\r\n        }\r\n        let num = 0;\r\n        if (handlerToMove == this.handlers[1]){\r\n            num = 1;\r\n        }\r\n        console.log (handlerToMove, num)\r\n        if(this.options.vertical){\r\n            let newTop: number = e.clientY + pageYOffset - this.handlersHeight/2 -  this.sliderPosition;\r\n            if (newTop <= (this.maxPosition - this.sliderPosition)) {\r\n                newTop = this.maxPosition - this.sliderPosition;\r\n            }\r\n            if (newTop >= this.minPosition - this.sliderPosition) {\r\n                newTop = this.minPosition - this.sliderPosition;\r\n            }\r\n            handlerToMove.style.top = newTop +  'px';\r\n            this.writeNewPosition(handlerToMove, num);\r\n            console.log(this.handlersPosition);\r\n        }\r\n        else {\r\n            let newLeft = e.clientX  + pageXOffset - this.handlersWidth/2 - this.sliderPosition;\r\n            if (newLeft <= (this.minPosition - this.sliderPosition)) {\r\n                newLeft = this.minPosition - this.sliderPosition;\r\n            }\r\n            if (newLeft >= this.maxPosition - this.sliderPosition) {\r\n                newLeft = this.maxPosition - this.sliderPosition;\r\n            }\r\n            handlerToMove.style.left = newLeft + 'px';\r\n            this.writeNewPosition(handlerToMove, num);\r\n        }\r\n    }\r\n\r\n    getNearestHandler = (position: number): HTMLDivElement =>{\r\n        let a = Math.abs(this.handlersPosition[0] - position);\r\n        let b = Math.abs(this.handlersPosition[1] - position);\r\n        console.log (position, a, b);\r\n        if (b < a) {\r\n            return this.handlers[1];\r\n        } else {\r\n            return this.handlers[0];\r\n        }\r\n    }\r\n\r\n}\r\n   \r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n","import Model from \"./model\";\r\nimport {View} from  \"./view\";\r\n\r\nexport interface IOptions{\r\n    minValue: number;\r\n    maxValue: number;\r\n    startingValue: [number, number];\r\n    vertical:boolean;\r\n    step: number;\r\n    range: boolean;\r\n    rangeInput: boolean;\r\n    valueInputs: boolean;\r\n    handlersAmount: number;\r\n    scale: boolean;\r\n    icon: boolean;\r\n    input: boolean;\r\n}\r\n\r\nexport class Presenter {\r\n    options:IOptions;\r\n    model: Model;\r\n    view: View;\r\n\r\n    constructor(options:IOptions, container:HTMLDivElement){\r\n        this.options = options;\r\n        this.model = new Model(this.options);\r\n        this.view = new View (this.options, container);\r\n        this.model.positionValueRate = this.view.positionRange / this.model.valueRange;\r\n        this.setInitialHandlersPosition();\r\n        console.log(this.view);\r\n        console.log(this.model);  \r\n        this.view.notifyChangedHandlerPosition = ():void => {\r\n            this.getValueFromPosition();\r\n        }\r\n        this.view.notifyChangedInputValue = (newInputValue:number, num: number) => {\r\n            this.model.currentValue[num] = newInputValue;\r\n            this.getPositionFromValue();\r\n        }\r\n    }\r\n\r\n    checkOptions = (options:IOptions) => {\r\n        if (options.minValue >= options.maxValue){\r\n            console.log ('minValue should not be equal or be more than maxValue');\r\n        }\r\n        if (options.startingValue){}\r\n\r\n            // minValue: 0,\r\n            // maxValue: 100,\r\n            // startingValue: [20, 60],\r\n            // vertical:false,\r\n            // step: 5,\r\n            // range: true,\r\n            // rangeInput: true,\r\n            // valueInputs: true,\r\n            // handlersAmount: 2,\r\n            // icon: true,\r\n            // input: true\r\n    }\r\n    \r\n    setInitialHandlersPosition = ():void => {\r\n        this.getPositionFromValue();\r\n        this.model.getRangeValue(this.options); \r\n    }\r\n\r\n    getValueFromPosition =  ():number[] => {\r\n        for (let i = 0; i < this.view.handlers.length; i++){\r\n            let computedValue:number;\r\n            if(this.options.vertical) {\r\n                computedValue = ((this.view.minPosition - this.view.handlersPosition[i]) / this.model.positionValueRate);\r\n            }\r\n            else {\r\n                computedValue = ((this.view.handlersPosition[i] - this.view.minPosition) / this.model.positionValueRate);\r\n                \r\n            }\r\n            let computedStepValue: number = (Math.round(computedValue / this.model.step)) * this.model.step;\r\n            if (computedValue > (this.options.step * this.model.stepsAmount)) {\r\n                this.model.currentValue[i] = this.model.maxValue;\r\n            }\r\n            else {\r\n                this.model.currentValue[i] = this.model.minValue + computedStepValue;\r\n            }\r\n            if (this.options.icon) {\r\n                this.view.icons[i].innerHTML = String(this.model.currentValue[i]);\r\n            }\r\n        }\r\n        this.model.getRangeValue(this.options);\r\n        if (this.options.rangeInput && this.options.range && this.options.handlersAmount > 1){\r\n            this.view.rangeInput.value = String(this.model.rangeValue);  \r\n        }\r\n\r\n        if (this.options.rangeInput && !this.options.range && this.options.handlersAmount > 1){\r\n            this.view.rangeInput.value = `${this.model.currentValue[0]}; ${this.model.currentValue[1]}`;  \r\n        } \r\n\r\n        if (this.options.valueInputs) {\r\n            for (let i = 0; i < this.options.handlersAmount; i++){\r\n                this.view.valueInputs[i].value = `${this.model.currentValue[i]}`;\r\n            }\r\n        } \r\n        if (this.options.moveBySteps) {\r\n            this.getPositionFromValue();\r\n        }\r\n        return this.model.currentValue;\r\n    }\r\n    \r\n     getPositionFromValue = ():void => {\r\n        for (let i = 0; i < this.view.handlers.length; i++){\r\n                if (this.options.vertical){\r\n                    this.view.handlers[i].style.top = Math.abs((this.model.currentValue[i] - this.model.maxValue) * this.model.positionValueRate) - this.view.handlersHeight/2 + 'px'; \r\n                    this.view.handlersPosition[i] = this.view.handlers[i].getBoundingClientRect().y + pageYOffset;\r\n                }\r\n                else {\r\n                    this.view.handlers[i].style.left = Math.abs((this.model.currentValue[i] - this.model.minValue) * this.model.positionValueRate) - this.view.handlersWidth/2 + 'px'; \r\n                    this.view.handlersPosition[i] = this.view.handlers[i].getBoundingClientRect().x + pageXOffset;\r\n                }\r\n            if (this.model.icon) {\r\n                this.view.icons[i].innerHTML = String(this.model.currentValue[i]);\r\n            }\r\n        }\r\n        this.model.getRangeValue(this.options);\r\n        if (this.options.rangeInput && this.options.range && this.options.handlersAmount > 1){\r\n            this.view.showRange(this.options);\r\n            this.view.rangeInput.value = String(this.model.rangeValue);  \r\n        }\r\n\r\n        if (this.options.rangeInput && !this.options.range && this.options.handlersAmount > 1){\r\n            this.view.rangeInput.value = `${this.model.currentValue[0]}; ${this.model.currentValue[1]}`;  \r\n        } \r\n                \r\n        if (this.options.valueInputs) {\r\n            for (let i = 0; i < this.options.handlersAmount; i++){\r\n                this.view.valueInputs[i].value = `${this.model.currentValue[i]}`; \r\n            }\r\n        } \r\n    }   \r\n}\r\n    \r\n    \r\n","'use strict';\r\nimport {Presenter} from './src/presenter';\r\nimport{IOptions} from './src/presenter';\r\n// var jquery = require(\"jquery\");\r\n// window.$ = window.jQuery = jquery;\r\n\r\n\r\n(function($){\r\n    jQuery.fn.slider = function(options:IOptions){\r\n        options = $.extend ({\r\n            minValue: -100,\r\n            maxValue: 100,\r\n            startingValue: [-50, 20],\r\n            vertical:false,\r\n            step: 15,\r\n            moveBySteps: true,\r\n            range: true,\r\n            rangeInput: true,\r\n            valueInputs: true,\r\n            handlersAmount: 2, \r\n            scale: true,\r\n            icon: true,\r\n            input: true\r\n        }, options);\r\n        var init = function(){\r\n            this.container = this;\r\n            this.presenter = new Presenter (options, this.container);\r\n            };\r\n    return this.each(init);    \r\n};\r\n})(jQuery);\r\n\r\n"]}