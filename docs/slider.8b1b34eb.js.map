{"version":3,"sources":["slider.ts","src/model1.ts","src/subView/subViewSliderLine.ts","src/subView/subViewHandlers.ts","src/subView/subViewIcons.ts","src/subView/subViewInput.ts","src/subView/subViewScale.ts","src/view.ts","src/presenter.ts"],"names":[],"mappings":"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","file":"slider.8b1b34eb.js","sourceRoot":"..","sourcesContent":["'use strict';\r\nimport {Presenter} from './src/presenter';\r\nimport{IOptions} from './src/presenter';\r\n// var jquery = require(\"jquery\");\r\n// window.$ = window.jQuery = jquery;\r\n\r\n\r\n(function( $ ){\r\n    const defaults:IOptions = {\r\n        minValue: -100,\r\n        maxValue: 100,\r\n        startingValue: [-50, 20],\r\n        vertical:false,\r\n        step: 10,\r\n        moveBySteps: true,\r\n        range: true,\r\n        rangeInput: true,\r\n        valueInputs: true,\r\n        handlersAmount: 2, \r\n        scale: true,\r\n        scaleLegend: true,\r\n        icon: true\r\n    };\r\n   \r\n    const methods = {\r\n        init: function (options:any) {\r\n            return this.each(function(){\r\n                const params = $.extend({}, defaults, options);\r\n                this.presenter = new Presenter (params, this);                \r\n            });\r\n        },\r\n\r\n        destroy: function  () {\r\n            return this.each(function(){\r\n                const slider = this.children;\r\n                for (let elem of slider) {\r\n                    elem.remove();\r\n                  }\r\n            })\r\n        }\r\n    };\r\n  \r\n    $.fn.slider = function(method) {\r\n      \r\n      if ( methods[method] ) {\r\n        return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\r\n      } else if ( typeof method === 'object' || ! method ) {\r\n        return methods.init.apply( this, arguments );\r\n      } else {\r\n        $.error( 'Метод с именем ' +  method + ' не существует для jQuery.slider' );\r\n      }    \r\n    \r\n    };\r\n  \r\n  })( jQuery );","'use strict';\r\nimport{IOptions} from './presenter';\r\ninterface IObj {\r\n    val: number,\r\n    percent: number\r\n}\r\nexport default class Model  {\r\n    options: IOptions;\r\n    stepsAmount: number;\r\n    valueRange: number;\r\n    allValues: Array<IObj>;\r\n    positionValueRate: number;\r\n    currentValue: number[];\r\n    rangeValue: number;\r\n    stepPercent: number;\r\n    valuePercent: number;\r\n    \r\n    \r\n\r\n    constructor (options:IOptions) {\r\n    this.options = options,\r\n    this.getValueRange (),\r\n    this.getStepsAmount (),\r\n    this.getStepPercent(),\r\n    this.getValuePercent(),\r\n    this.getAllValues(),\r\n    this.getInitialCurrentValue(),\r\n    this.getRangeValue()\r\n    }\r\n\r\n    getInitialCurrentValue = ():void => {\r\n        this.currentValue = [];\r\n        for (let i = 0; i < this.options.handlersAmount; i++){\r\n            this.currentValue[i] = this.options.startingValue[i];\r\n        }\r\n    }\r\n\r\n    getValueRange = ():void => {\r\n        this.valueRange = Math.abs(this.options.maxValue - this.options.minValue);\r\n    }\r\n\r\n    getStepsAmount = ():void => {\r\n        this.stepsAmount = Math.ceil(this.valueRange / this.options.step);\r\n    }\r\n\r\n    getStepPercent = ():void => {\r\n        this.stepPercent =  (this.options.step / this.valueRange)*100;\r\n    }\r\n\r\n    getValuePercent = ():void => {\r\n        this.valuePercent = 100 / this.valueRange;\r\n    }\r\n\r\n    getRangeValue = ():void => {\r\n        this.rangeValue = Math.abs(this.currentValue[1] - this.currentValue[0]);\r\n    }\r\n\r\n    getAllValues = ():void =>{\r\n        this.allValues = [];\r\n        for (let i = 0; i <= this.stepsAmount; i++){\r\n            let _value:IObj = {};\r\n            _value.val = this.options.minValue + this.options.step * i;\r\n            _value.percent = this.stepPercent * i;\r\n            if (_value.percent >= 100){\r\n                _value.percent = 100;\r\n                _value.val = this.options.maxValue;\r\n            }\r\n            this.allValues.push(_value);\r\n        }\r\n        console.log(this.allValues);\r\n    }\r\n}","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewSliderLine  {\r\n    createSliderLine = (sliderContainer:HTMLDivElement, options:IOptions):HTMLDivElement => {\r\n        const sliderLine:HTMLDivElement = document.createElement('div');\r\n        sliderLine.classList.add('slider__slider');\r\n        if (options.vertical) {\r\n            sliderLine.classList.add('slider__slider_vertical');\r\n        }\r\n        sliderContainer.append(sliderLine);\r\n        let slider:HTMLDivElement = sliderContainer.querySelector('.slider__slider');\r\n        this.addSliderListener(slider);\r\n        return slider;\r\n    }\r\n\r\n    addSliderListener = (slider:HTMLDivElement):void => {\r\n        slider.onclick = (e):void => {\r\n            this.sliderClick(e);\r\n        }\r\n    }\r\n\r\n    sliderClick: any;\r\n} \r\n\r\n\r\n","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewHandlers  {\r\n    createHandlers(options:IOptions, slider:HTMLDivElement):NodeListOf<HTMLDivElement> {\r\n        for (let i = 0; i < options.handlersAmount; i++){\r\n            const handler:HTMLDivElement = document.createElement('div');\r\n            handler.classList.add('slider__handler');\r\n            if (options.vertical) {\r\n                handler.classList.add('slider__handler_vertical');\r\n            } else{\r\n                handler.classList.add('slider__handler_horisontal');\r\n            }\r\n            slider.append(handler);\r\n        }\r\n        let handlers:NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__handler');\r\n        this.addHandlerListeners(handlers);\r\n        return handlers;\r\n    }\r\n\r\n    addHandlerListeners = (handlers:NodeListOf<HTMLDivElement>):void => {\r\n        handlers[0].onmousedown = (e):void => {\r\n            this.handlerMouseDown(e, handlers[0], 0);\r\n        }\r\n        if(handlers[1]){\r\n            handlers[1].onmousedown = (e):void => { \r\n                this.handlerMouseDown(e, handlers[1], 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    handlerMouseDown: any;\r\n    \r\n}   \r\n","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewIcons  {\r\n    createIcons(options:IOptions, handlers:NodeListOf<HTMLDivElement>, slider:HTMLDivElement):NodeListOf<HTMLDivElement> {\r\n        for (let i = 0; i < handlers.length; i++){\r\n            const icon:HTMLDivElement = document.createElement('div');\r\n            icon.classList.add('slider__icon');\r\n            if (options.vertical) {\r\n                icon.classList.add('slider__icon_vertical');\r\n            } else{\r\n                icon.classList.add('slider__icon_horisontal');\r\n            }\r\n            handlers[i].append(icon);\r\n        }\r\n        let icons:NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__icon'); \r\n        return icons;     \r\n    } \r\n}   ","import { IOptions } from \"../presenter\";\r\n\r\nexport  default class SubViewInput  {\r\n    \r\n    createInputsContainer(options:IOptions, slider:HTMLDivElement, sliderContainer:HTMLDivElement):HTMLDivElement {\r\n        let _container:HTMLDivElement = document.createElement('div');\r\n        _container.classList.add('slider__inputsContainer');\r\n        slider.before(_container);\r\n        let inputsContainer:HTMLDivElement = sliderContainer.querySelector('.slider__inputsContainer');\r\n        return inputsContainer;\r\n    }\r\n\r\n    createRangeInput (options:IOptions, inputsContainer:HTMLDivElement): HTMLInputElement {\r\n        let inputLabel:HTMLElement = document.createElement('span');\r\n        inputLabel.classList.add('slider__inputLabel');\r\n        inputLabel.innerText = 'Range';\r\n        inputsContainer.append(inputLabel);\r\n        let rangeInput:HTMLInputElement = document.createElement('input');\r\n        rangeInput.setAttribute('type', 'text');\r\n        rangeInput.setAttribute ('readonly', 'true');\r\n        rangeInput.setAttribute ('size', '8');\r\n        rangeInput.classList.add('slider__input', 'slider__input_range');\r\n        inputLabel.append(rangeInput);\r\n        \r\n        let input:HTMLInputElement = inputsContainer.querySelector('.slider__input_range');\r\n        return input;\r\n    }\r\n\r\n    createValueInputs (options:IOptions, inputsContainer:HTMLDivElement):NodeListOf<HTMLInputElement>{\r\n        for (let i = 0; i < +options.handlersAmount; i++){\r\n            let inputLabel:HTMLElement = document.createElement('span');\r\n            inputLabel.classList.add('slider__inputLabel');\r\n            inputLabel.innerText = `Value ${i+1}`;\r\n            inputsContainer.append(inputLabel);\r\n            let valueInput:HTMLInputElement = document.createElement('input');\r\n            valueInput.setAttribute('type', 'text');\r\n            valueInput.setAttribute ('size', '8');\r\n            valueInput.classList.add('slider__input', 'slider__input_value');\r\n            inputLabel.append(valueInput);\r\n            \r\n        }\r\n        let inputs:NodeListOf<HTMLInputElement> = inputsContainer.querySelectorAll('.slider__input_value');\r\n        this.addInputsListener(inputs);\r\n        return inputs;\r\n    }\r\n\r\n    addInputsListener = (inputs:NodeListOf<HTMLInputElement>):void => {\r\n        inputs.forEach (\r\n            input => {\r\n                input.onfocus = () => {\r\n                    input.value = '';\r\n                    input.addEventListener('blur',  (e) => {\r\n                        this.getInputValue(input, inputs, e);\r\n                    })\r\n                    input.addEventListener('keydown',  (e) => {\r\n                        if (e.code == 'Enter') {\r\n                            this.getInputValue(input, inputs, e);\r\n                        }\r\n                    })                       \r\n                }\r\n            }\r\n        )      \r\n    }\r\n\r\n    getInputValue = (input: HTMLInputElement, inputs:NodeListOf<HTMLInputElement>, e: FocusEvent | KeyboardEvent): void => {\r\n        let newInputValue: number = Number(input.value);\r\n            if (input.value == '' || isNaN(Number(input.value))) {\r\n                newInputValue = undefined;\r\n            }\r\n            if (e.target == inputs[0]){\r\n                this.newInputValue(newInputValue, 0);\r\n            }\r\n            else{\r\n                this.newInputValue(newInputValue, 1);\r\n            }\r\n    }\r\n    newInputValue:any;\r\n}\r\n","import { IOptions } from \"../presenter\";\r\n\r\nexport default class SubViewScale  {\r\n    options: IOptions;\r\n    createScale = (options:IOptions, slider:HTMLDivElement):NodeListOf<HTMLDivElement> => {\r\n        this.options = options;\r\n        let pointsAmount: number = Math.ceil((options.maxValue - options.minValue) / options.step) + 1;\r\n        for (let i = 0; i < pointsAmount; i++){\r\n            const scalePoint:HTMLDivElement = document.createElement('div');\r\n            scalePoint.classList.add('slider__scale-point');\r\n            if (options.vertical) {\r\n                scalePoint.classList.add('slider__scale-point_vertical');\r\n            } else{\r\n                scalePoint.classList.add('slider__scale-point_horisontal');\r\n            }\r\n            slider.append(scalePoint);\r\n        }\r\n        let scalePoints:NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__scale-point');\r\n        // if (options.scaleLegend){\r\n        //     this.addScaleLegend(scalePoints, slider);\r\n        // }\r\n        return scalePoints;\r\n    }\r\n\r\n    addScaleLegend = (scalePoints:NodeListOf<HTMLDivElement>, slider:HTMLDivElement) => {\r\n        scalePoints.forEach(\r\n            scalePoint => {\r\n                let legend: HTMLDivElement = document.createElement('div');\r\n                legend.classList.add('slider__scale-legend');\r\n                if (this.options.vertical){\r\n                    legend.classList.add('slider__scale-legend_vertical');\r\n                }\r\n                else {\r\n                    legend.classList.add('slider__scale-legend_horisontal');\r\n                }\r\n                scalePoint.append(legend);\r\n            }\r\n        )\r\n        let scaleLegend: NodeListOf<HTMLDivElement> = slider.querySelectorAll('.slider__scale-legend');\r\n        return scaleLegend;\r\n    }\r\n\r\n\r\n\r\n    // addScaleListener = (scalePoints:NodeListOf<HTMLDivElement>):void => {\r\n    //     scalePoints.forEach(point => {\r\n    //         point.onclick = (e):void => {\r\n    //             this.scalePpointClick(e);\r\n    //         }\r\n    //     });\r\n        \r\n    // }\r\n\r\n    // scalePpointClick: any;\r\n}","'use strict';\r\nimport SubViewSliderLine from './subView/subViewSliderLine';\r\nimport SubViewHandlers from './subView/subViewHandlers';\r\nimport SubViewIcons from './subView/subViewIcons';\r\nimport SubViewInput from './subView/subViewInput';\r\nimport {IOptions} from './presenter';\r\nimport SubViewScale from './subView/subViewScale';\r\n\r\nexport class View {\r\n    options: IOptions;\r\n    subViewSliderLine: SubViewSliderLine;\r\n    subViewHandlers: SubViewHandlers;\r\n    subViewScale: SubViewScale;\r\n    subViewIcons: SubViewIcons;\r\n    subViewInput: SubViewInput;\r\n    sliderContainer:HTMLDivElement;\r\n    slider: HTMLDivElement;\r\n    handlers: NodeListOf<HTMLDivElement>;\r\n    scale: NodeListOf<HTMLDivElement>;\r\n    scaleLegend: NodeListOf<HTMLDivElement>;\r\n    icons: NodeListOf<HTMLDivElement>;\r\n    inputsContainer: HTMLDivElement;\r\n    rangeInput:HTMLInputElement;\r\n    valueInputs: NodeListOf<HTMLInputElement>;\r\n    sliderPosition: number;\r\n    sliderLength: number;\r\n    sliderBorder: number;\r\n    handlerSizePerc: number;\r\n    handlerSizePx: number;\r\n    maxPosition: number;\r\n    minPosition: number;\r\n    minPositionPerc:number;\r\n    maxPositionPerc: number;\r\n    positionRange: number;\r\n    handlersPosition: number[];\r\n    handlersPositionPerc: number[];\r\n    rangeBlock: HTMLDivElement;\r\n\r\n\r\n    constructor (options:IOptions, container:HTMLDivElement){\r\n        this.options = options;\r\n        this.subViewSliderLine = new SubViewSliderLine;\r\n        this.subViewHandlers = new SubViewHandlers;\r\n        this.subViewScale = new SubViewScale;\r\n        this.subViewIcons = new SubViewIcons;\r\n        this.subViewInput = new SubViewInput;\r\n        this.handlersPosition = [];\r\n        this.handlersPositionPerc = [];\r\n        this.createSlider(options, container);\r\n        this.getSliderData();\r\n        if (this.options.scale){\r\n            this.getScalePosition();\r\n        }\r\n        this.resizeListener();\r\n        this.subViewHandlers.handlerMouseDown = (e:MouseEvent, handler:HTMLDivElement, num:number):void => {\r\n            this.moveByMouse(e, handler, num);\r\n        }\r\n        this.subViewInput.newInputValue = (newInputValue:number, num:number):void => {\r\n            this.notifyChangedInputValue(newInputValue, num);\r\n        }\r\n        this.subViewSliderLine.sliderClick = (e:MouseEvent):void => {\r\n            if (e.target !== this.handlers [0] && e.target !== this.handlers [1]) {\r\n                this.moveByClick(e);\r\n            }\r\n        }\r\n    }\r\n    \r\n    createSlider = (options:IOptions, container:HTMLDivElement):void => {\r\n        this.sliderContainer = this.createContainer(options, container);\r\n        this.slider = this.subViewSliderLine.createSliderLine(this.sliderContainer, options);\r\n        this.handlers = this.subViewHandlers.createHandlers(options, this.slider);\r\n        if (this.options.scale) {\r\n            this.scale = this.subViewScale.createScale(options, this.slider);\r\n        }\r\n        if (this.options.scaleLegend){\r\n            this.scaleLegend = this.subViewScale.addScaleLegend(this.scale, this.slider);\r\n        }\r\n        if (this.options.icon) {\r\n            this.icons = this.subViewIcons.createIcons(options, this.handlers, this.slider);\r\n        }\r\n        if (this.options.rangeInput || this.options.valueInputs){\r\n            this.inputsContainer = this.subViewInput.createInputsContainer(options, this.slider, this.sliderContainer);\r\n            if (this.options.rangeInput && this.options.handlersAmount > 1){\r\n                this.rangeInput = this.subViewInput.createRangeInput(options, this.inputsContainer);\r\n            }  \r\n            if (this.options.valueInputs){\r\n            this.valueInputs = this.subViewInput.createValueInputs(options, this.inputsContainer);\r\n            }\r\n        }    \r\n    }\r\n\r\n    createContainer = (options:IOptions, container:HTMLElement):HTMLDivElement => {\r\n        const _cont:HTMLDivElement = document.createElement('div');\r\n        _cont.classList.add('slider__container');\r\n        if (this.options.vertical) {\r\n            _cont.classList.add('slider__container_vertical');\r\n        }\r\n        else {\r\n            _cont.classList.add('slider__container_horisontal');\r\n        }\r\n        container.append(_cont);\r\n        let sliderContainer:HTMLDivElement = container.querySelector('.slider__container');\r\n        return sliderContainer;\r\n    }\r\n\r\n    resizeListener = () => {\r\n        let resize =  () =>  {\r\n            this.notifyChangedWindow();\r\n          }\r\n          window.addEventListener('resize', resize);\r\n    }\r\n\r\n    notifyChangedWindow: any;\r\n\r\n    getSliderData = ():void => {\r\n        this.getSliderPosition();\r\n        this.getSliderLength();\r\n        this.getHandlerSize();\r\n        this.getMinMaxPosition();\r\n        if (this.options.range) {\r\n            this.rangeBlock = this.showRange();\r\n        }       \r\n    }\r\n\r\n    getSliderPosition = ():void  => {\r\n        if (this.options.vertical){\r\n            this.sliderPosition = this.slider.getBoundingClientRect().y + pageYOffset;\r\n        }\r\n        else {\r\n            this.sliderPosition = this.slider.getBoundingClientRect().x + pageXOffset\r\n        }\r\n    }\r\n\r\n    getSliderLength = ():void => {\r\n        if (this.options.vertical){\r\n            this.sliderLength = this.slider.getBoundingClientRect().height;\r\n        }\r\n        else {\r\n            this.sliderLength = this.slider.getBoundingClientRect().width;\r\n        }\r\n    }\r\n\r\n    getHandlerSize = ():void => {\r\n        this.getSliderLength();\r\n        if (this.options.vertical){\r\n            this.handlerSizePerc = (this.handlers[0].offsetHeight / 2) / this.sliderLength * 100;\r\n            this.handlerSizePx = this.handlers[0].offsetHeight;\r\n\r\n        }\r\n        else {\r\n            this.handlerSizePerc = (this.handlers[0].offsetWidth / 2) / this.sliderLength * 100;\r\n            this.handlerSizePx = this.handlers[0].offsetWidth;\r\n        }\r\n    }\r\n\r\n    getMinMaxPosition = ():void =>{\r\n        this.getHandlerSize;\r\n        if (this.options.vertical){\r\n            this.maxPosition = this.sliderPosition - this.handlerSizePx/2;\r\n            this.maxPositionPerc = 0 - this.handlerSizePerc;\r\n            this.minPosition = this.maxPosition + this.sliderLength;\r\n            this.minPositionPerc = 100 - this.handlerSizePerc\r\n        }\r\n        else {\r\n            this.minPosition = this.sliderPosition - this.handlerSizePx/2;\r\n            this.minPositionPerc = 0 - this.handlerSizePerc;\r\n            this.maxPosition = this.minPosition + this.sliderLength;\r\n            this.maxPositionPerc = 100 - this.handlerSizePerc;\r\n        }\r\n        this.positionRange = Math.abs(this.minPosition - this.maxPosition);\r\n    }\r\n\r\n\r\n    getScalePosition = (): void => {\r\n        const posToVal: number = this.positionRange / Math.abs((this.options.maxValue - this.options.minValue));\r\n        const percentPosToVal = (posToVal/this.positionRange) * 100\r\n        for (let i = 0; i < this.scale.length; i++){\r\n            if (this.options.vertical) {\r\n                if (i == 0) {\r\n                    // this.scale[i].style.top = this.positionRange + 'px';\r\n                    this.scale[i].style.top = '100%';\r\n                }\r\n                else if (i == this.scale.length - 1){\r\n                    this.scale[i].style.top = '0%';\r\n                }\r\n                else {\r\n                    this.scale[i].style.top = 100 - (i * percentPosToVal * this.options.step)  + '%';\r\n                }    \r\n            } else {\r\n                if (i == 0) {\r\n                    this.scale[i].style.left = '0%';\r\n                }\r\n                else if (i == this.scale.length - 1){\r\n                    this.scale[i].style.left = '100%';\r\n                }\r\n                else {\r\n                    this.scale[i].style.left = (i * percentPosToVal * this.options.step)  + '%';\r\n                }    \r\n            }\r\n        }\r\n        if (this.options.scaleLegend){\r\n            this.getScaleLegendValues();\r\n        }\r\n    }\r\n\r\n    getScaleLegendValues = () => {\r\n        this.scaleLegend.forEach(\r\n            scaleLegend => {\r\n                if (this.options.vertical){\r\n                    let position = scaleLegend.parentElement.style.top;\r\n                    let value = (100 -Number(position.slice(0, -1))) / 100 * Math.abs((this.options.maxValue - this.options.minValue));\r\n                    let legValue = Math.round(this.options.minValue + value);\r\n                    scaleLegend.innerHTML = legValue.toString();\r\n                    let shift = scaleLegend.getBoundingClientRect().height / 2;\r\n                    scaleLegend.style.top = -shift + 'px';\r\n                }\r\n                else {\r\n                    let position = scaleLegend.parentElement.style.left;\r\n                    let value = Number(position.slice(0, -1)) / 100 * Math.abs((this.options.maxValue - this.options.minValue));\r\n                    let legValue = Math.round(this.options.minValue + value);\r\n                    scaleLegend.innerHTML = legValue.toString();\r\n                    let shift = scaleLegend.getBoundingClientRect().width / 2;\r\n                    scaleLegend.style.left = -shift + 'px';\r\n                }\r\n            }\r\n        )\r\n    };\r\n\r\n    showRange = ():HTMLDivElement => {\r\n        let rangeBlock:HTMLDivElement = document.createElement('div');\r\n        rangeBlock.classList.add('slider__range');\r\n        if (this.options.vertical){\r\n            rangeBlock.style.width = this.slider.getBoundingClientRect().width + 2 + 'px';\r\n            rangeBlock.style.left = -1 + 'px';\r\n        } \r\n        else {\r\n            rangeBlock.style.height = this.slider.getBoundingClientRect().height + 2 + 'px';\r\n            rangeBlock.style.top = -1 + 'px';\r\n        }\r\n        this.slider.append(rangeBlock);\r\n        this.rangeBlock = this.slider.querySelector('.slider__range');\r\n        this.getSliderRangePosition();\r\n        return this.rangeBlock;\r\n    }\r\n\r\n    getSliderRangePosition = ():void => {\r\n        this.getHandlerSize();\r\n        if (this.options.vertical){\r\n            if (this.handlersPositionPerc[0] > this.handlersPositionPerc[1]) {\r\n                this.rangeBlock.style.top = this.handlersPositionPerc[1]  + '%';\r\n            }\r\n            else {\r\n                this.rangeBlock.style.top = this.handlersPositionPerc[0] + '%';\r\n            }\r\n            this.rangeBlock.style.height = Math.abs(this.handlersPositionPerc[1] - this.handlersPositionPerc[0]) + '%';\r\n        } \r\n        else {\r\n            if (this.handlersPositionPerc[0] > this.handlersPositionPerc[1]) {\r\n                this.rangeBlock.style.left = this.handlersPositionPerc[1]  + '%';\r\n            }\r\n            else {\r\n                this.rangeBlock.style.left = this.handlersPositionPerc[0]  + '%';\r\n            }\r\n            this.rangeBlock.style.width = (Math.abs(this.handlersPositionPerc[1] - this.handlersPositionPerc[0])) + '%';\r\n       }\r\n    }\r\n  \r\n    moveByMouse = (e:MouseEvent, handler:HTMLDivElement, num:number): void => {\r\n        e.preventDefault();\r\n        this.getMinMaxPosition();\r\n        let shift:number;\r\n        let shiftXPerc: number;\r\n        if(this.options.vertical){\r\n            shift = e.clientY  - this.handlers[num].getBoundingClientRect().y ;\r\n        }\r\n        else {\r\n            shift = e.clientX - this.handlers[num].getBoundingClientRect().x + pageXOffset;\r\n        }\r\n        shiftXPerc = (shift / this.sliderLength) * 100;\r\n        handler.classList.add('slider__handler_active');\r\n        document.onmousemove = (e:MouseEvent):void => {\r\n            e.preventDefault;\r\n            let mousePos:number;\r\n            let mouseposPerc: number;\r\n            if(this.options.vertical){\r\n                mousePos = e.clientY ;\r\n                mouseposPerc = ((mousePos - this.slider.getBoundingClientRect().y) / this.slider.getBoundingClientRect().height)*100;\r\n                let newTop: number = mouseposPerc  - shiftXPerc;\r\n                if (newTop <= this.maxPositionPerc) {\r\n                    newTop = this.maxPositionPerc;\r\n                }\r\n                if (newTop >= this.minPositionPerc) {\r\n                    newTop = this.minPositionPerc;\r\n                }\r\n                handler.style.top = newTop  + '%';\r\n                this.writeNewPosition(handler, num, newTop);\r\n            }\r\n            else {\r\n                mousePos = e.clientX ;\r\n                mouseposPerc = ((mousePos - this.slider.getBoundingClientRect().x) / this.slider.getBoundingClientRect().width)*100;\r\n                let newLeft:number = mouseposPerc  - shiftXPerc;\r\n                if (newLeft <= this.minPositionPerc) {\r\n                    newLeft = this.minPositionPerc;\r\n                }\r\n                if (newLeft >= this.maxPositionPerc) {\r\n                    newLeft = this.maxPositionPerc;\r\n                }\r\n                handler.style.left = newLeft + '%';\r\n                this.writeNewPosition(handler, num, newLeft);\r\n            }\r\n        }\r\n        document.onmouseup = ():void => {\r\n            handler.classList.remove('slider__handler_active');\r\n            document.onmousemove = null;\r\n          };\r\n    }\r\n    \r\n    writeNewPosition = (handler:HTMLDivElement, num: number, newPos: number):void => {\r\n        this.handlersPositionPerc[num] = newPos + this.handlerSizePerc;\r\n        if(this.options.range){\r\n            this.getSliderRangePosition();\r\n        }\r\n        this.notifyChangedHandlerPosition();\r\n    }\r\n\r\n    notifyChangedHandlerPosition: any;\r\n\r\n    notifyChangedInputValue: any; \r\n\r\n    moveByClick = (e:MouseEvent) => {\r\n        e.preventDefault();\r\n        this.getMinMaxPosition();\r\n        let clickPosition: number;\r\n        if (this.options.vertical) {\r\n            clickPosition = e.clientY;\r\n        }\r\n        else {\r\n            clickPosition = e.clientX ;\r\n        }\r\n        let handlerToMove:HTMLDivElement;\r\n        if (this.options.handlersAmount == 2) {\r\n            handlerToMove = this.getNearestHandler(clickPosition);\r\n        }\r\n        else {\r\n            handlerToMove = this.handlers[0];\r\n        }\r\n        let num = 0;\r\n        if (handlerToMove == this.handlers[1]){\r\n            num = 1;\r\n        }\r\n        let clickPosPerc: number;\r\n        if(this.options.vertical){\r\n            clickPosPerc = ((clickPosition - this.slider.getBoundingClientRect().y) / this.slider.getBoundingClientRect().height) * 100;\r\n            let newTop: number = clickPosPerc - this.handlerSizePerc;\r\n            if (newTop <= this.maxPositionPerc) {\r\n                newTop = this.maxPositionPerc;\r\n            }\r\n            if (newTop >= this.minPositionPerc) {\r\n                newTop = this.minPositionPerc;\r\n            }\r\n            handlerToMove.style.top = newTop +  '%';\r\n            this.writeNewPosition(handlerToMove, num, newTop);\r\n        }\r\n        else {\r\n            clickPosPerc = ((clickPosition - this.slider.getBoundingClientRect().x) / this.slider.getBoundingClientRect().width)*100;\r\n            let newLeft = clickPosPerc - this.handlerSizePerc;\r\n            if (newLeft <= this.minPositionPerc) {\r\n                newLeft = this.minPositionPerc;\r\n            }\r\n            if (newLeft >= this.maxPositionPerc) {\r\n                newLeft = this.maxPositionPerc;\r\n            }\r\n            handlerToMove.style.left = newLeft + '%';\r\n            this.writeNewPosition(handlerToMove, num, newLeft);\r\n        }\r\n    }\r\n\r\n    getNearestHandler = (position: number): HTMLDivElement => {\r\n        let a: number,\r\n            b: number;\r\n        if (this.options.vertical){\r\n            a = Math.abs(this.handlers[0].getBoundingClientRect().y - position);\r\n            b = Math.abs(this.handlers[1].getBoundingClientRect().y - position);\r\n        }\r\n        else {\r\n            a = Math.abs(this.handlers[0].getBoundingClientRect().x - position);\r\n            b = Math.abs(this.handlers[1].getBoundingClientRect().x - position);\r\n        }\r\n        if (b < a) {\r\n            return this.handlers[1];\r\n        } else {\r\n            return this.handlers[0];\r\n        }\r\n    }\r\n\r\n    updatePosition = () => {\r\n        for (let i = 0; i < this.handlers.length; i++) {\r\n            let newPos = this.handlersPositionPerc[i] - this.handlerSizePerc;\r\n            if (this.options.vertical) {\r\n                this.handlers[i].style.top = newPos + '%'; \r\n            }\r\n            else {\r\n                this.handlers[i].style.left = newPos + '%';\r\n            }\r\n        }\r\n        // console.log('update');\r\n    }\r\n}\r\n","import Model from \"./model1\";\r\nimport {View} from  \"./view\";\r\n\r\nexport interface IOptions{\r\n    minValue: number;\r\n    maxValue: number;\r\n    startingValue: [number, number];\r\n    vertical:boolean;\r\n    step: number;\r\n    moveBySteps: boolean;\r\n    range: boolean;\r\n    rangeInput: boolean;\r\n    valueInputs: boolean;\r\n    handlersAmount: number;\r\n    scale: boolean;\r\n    scaleLegend: boolean;\r\n    icon: boolean;\r\n}\r\n\r\nexport class Presenter {\r\n    options:IOptions;\r\n    model: Model;\r\n    view: View;\r\n\r\n    constructor(options:IOptions, container:HTMLDivElement){\r\n        this.checkOptions(options);\r\n        this.model = new Model(this.options);\r\n        this.view = new View (this.options, container);\r\n        this.setInitialHandlersPosition();\r\n        this.view.notifyChangedHandlerPosition = ():void => {\r\n            this.getValueFromPosition();\r\n        }\r\n        this.view.notifyChangedInputValue = (newInputValue:number, num: number) => {\r\n            this.setHandlersToInputValue (newInputValue, num);\r\n        }\r\n\r\n        this.view.notifyChangedWindow = () => {\r\n            this.getPositionFromValue();\r\n        }\r\n        // console.log (this.view);\r\n        // console.log (this.model);\r\n    }\r\n\r\n    checkOptions = (options:IOptions) => {\r\n        this.options = options;\r\n        this.options.minValue = Number(options.minValue);\r\n        this.options.maxValue = Number(options.maxValue);\r\n        this.options.startingValue = [Number(options.startingValue[0]), Number(options.startingValue[1])];\r\n        this.options.step = Number(options.step);\r\n        this.options.handlersAmount = Number(options.handlersAmount);\r\n\r\n        if (this.options.minValue >= this.options.maxValue){\r\n            console.log ('Slider: minValue should not be equal or be more than maxValue');\r\n        }\r\n\r\n        for (let i = 0; i <= this.options.startingValue.length; i++){\r\n            if (this.options.startingValue[i] > this.options.maxValue){\r\n                this.options.startingValue[i] = this.options.maxValue;\r\n            }\r\n            else if (this.options.startingValue[i] < this.options.minValue){\r\n                this.options.startingValue[i] = this.options.minValue;\r\n            }\r\n        }\r\n\r\n        if (this.options.handlersAmount < 1){\r\n            this.options.handlersAmount = 1;\r\n            console.log ('Slider: handlers amount should be equal either 1 or 2');\r\n        }\r\n        else if (this.options.handlersAmount > 2){\r\n            this.options.handlersAmount = 2;\r\n            console.log ('Slider: handlers amount should be equal either 1 or 2');\r\n        }\r\n        if (this.options.handlersAmount == 2 && this.options.startingValue.length < 2){\r\n            this.options.startingValue = [this.options.minValue, this.options.maxValue];\r\n            console.log('Slider: starting value should be defined for every handler');\r\n        }\r\n\r\n        if (this.options.step >= Math.abs(this.options.maxValue - this.options.minValue)) {\r\n            console.log ('Slider: step value should  be  less than slider value range');\r\n        }\r\n\r\n        if (this.options.handlersAmount == 1 && this.options.range){\r\n            this.options.range = false;\r\n            console.log('Slider: range option cannot be applied to one handler')\r\n        }\r\n\r\n        if (this.options.scaleLegend && !this.options.scale){\r\n            this.options.scaleLegend = false;\r\n            console.log('Slider: scaleLegend option cannot be applied without scale option')\r\n        }\r\n    }\r\n    \r\n    setInitialHandlersPosition = ():void => {\r\n        this.getPositionFromValue();\r\n        if (this.options.range) {\r\n            this.model.getRangeValue();\r\n            this.view.getSliderRangePosition();\r\n        }\r\n    }\r\n\r\n    setHandlersToInputValue = (inputValue:number, num: number): void => {\r\n        if (inputValue == undefined) {\r\n            this.getValueFromPosition();\r\n            return;\r\n        }\r\n        else if (inputValue > this.options.maxValue) {\r\n            inputValue = this.options.maxValue;\r\n        }\r\n        else if (inputValue < this.options.minValue) {\r\n            inputValue = this.options.minValue;\r\n        }\r\n        this.model.currentValue[num] = inputValue;\r\n        this.getPositionFromValue();\r\n    }\r\n\r\n    getValueFromPosition =  ():number[] => {\r\n        for (let i = 0; i < this.view.handlers.length; i++){\r\n            let computedValue:number;\r\n            if(this.options.vertical) {\r\n                computedValue = (100 - this.view.handlersPositionPerc[i] ) / this.model.valuePercent;\r\n            }\r\n            else {\r\n                computedValue = this.view.handlersPositionPerc[i]  / this.model.valuePercent;   \r\n            }\r\n            if (this.options.moveBySteps) {\r\n                this.getNearestStepPos();\r\n                if (this.options.range){\r\n                    this.view.getSliderRangePosition();\r\n                }\r\n            }\r\n            else {\r\n                this.model.currentValue[i] = this.options.minValue + Math.round(computedValue);\r\n            }\r\n            if (this.options.icon) {\r\n                this.view.icons[i].innerHTML = String(this.model.currentValue[i]);\r\n            }\r\n        \r\n        }\r\n        this.model.getRangeValue();\r\n        if (this.options.rangeInput && this.options.range && this.options.handlersAmount > 1){\r\n            this.view.rangeInput.value = String(this.model.rangeValue);  \r\n        }\r\n\r\n        if (this.options.rangeInput && !this.options.range && this.options.handlersAmount > 1){\r\n            this.view.rangeInput.value = `${this.model.currentValue[0]}; ${this.model.currentValue[1]}`;  \r\n        } \r\n\r\n        if (this.options.valueInputs) {\r\n            for (let i = 0; i < this.options.handlersAmount; i++){\r\n                this.view.valueInputs[i].value = `${this.model.currentValue[i]}`;\r\n            }\r\n        } \r\n        return this.model.currentValue;\r\n    }\r\n    \r\n    getNearestStepPos = () => {\r\n        for (let i = 0; i < this.view.handlers.length; i++){\r\n            let pos:number;\r\n            if (this.options.vertical) {\r\n                pos = 100 - this.view.handlersPositionPerc[i];\r\n            }\r\n            else {\r\n                pos = this.view.handlersPositionPerc[i];\r\n            }\r\n            let _ratio = this.model.stepPercent/2;\r\n            let curStep = this.model.allValues.filter(step => Math.abs(pos - step.percent) < _ratio);\r\n            if (curStep.length > 1 && curStep.length <= 2){\r\n                let delta1 = Math.abs(pos - curStep[0].percent);\r\n                let delta2 = Math.abs(pos - curStep[1].percent);\r\n                if(delta1 < delta2) {\r\n                    curStep.splice(1,1);\r\n                }\r\n                else {\r\n                    curStep.splice(0,1);\r\n                }\r\n            }\r\n            if (this.options.vertical) {\r\n                this.view.handlersPositionPerc[i] = 100 - curStep[0].percent;\r\n            }\r\n            else {\r\n                this.view.handlersPositionPerc[i] = curStep[0].percent;\r\n            }\r\n            this.view.updatePosition();\r\n            this.model.currentValue[i] = curStep[0].val;\r\n        }\r\n    }\r\n\r\n    getNearestStepVal = () => {\r\n        for (let i = 0; i < this.view.handlers.length; i++){\r\n            let val:number = this.model.currentValue[i];\r\n            let _ratio = this.options.step / 2;\r\n            let curVal = this.model.allValues.filter(step => Math.abs(step.val - val) <= _ratio);\r\n            if (curVal.length > 1 && curVal.length <= 2) {\r\n                let delta1 = Math.abs(val - curVal[0].val);\r\n                let delta2 = Math.abs(val - curVal[1].val);\r\n                if(delta1 < delta2) {\r\n                    curVal.splice(1,1);\r\n                }\r\n                else {\r\n                    curVal.splice(0,1);\r\n                }\r\n            }\r\n            if (this.options.vertical) {\r\n                this.view.handlersPositionPerc[i] = 100 - curVal[0].percent;\r\n            }\r\n            else {\r\n                this.view.handlersPositionPerc[i] = curVal[0].percent;\r\n            }\r\n            this.model.currentValue[i] = curVal[0].val;\r\n        }\r\n    }\r\n\r\n    getPositionFromValue = ():void => {\r\n        this.view.getMinMaxPosition();\r\n        for (let i = 0; i < this.view.handlers.length; i++){\r\n            let _value:number = this.model.currentValue[i] - this.options.minValue;\r\n            let newPos:number;\r\n            if (this.options.vertical){\r\n                if (!this.options.moveBySteps){\r\n                    newPos = (100 - (_value * this.model.valuePercent) - this.view.handlerSizePerc);\r\n                    this.view.handlersPositionPerc[i] = newPos + this.view.handlerSizePerc;\r\n                }\r\n                else {\r\n                    this.getNearestStepVal();\r\n                    newPos = this.view.handlersPositionPerc[i] - this.view.handlerSizePerc; \r\n                } \r\n                this.view.handlers[i].style.top = newPos + '%';\r\n            }\r\n            else {\r\n                if (!this.options.moveBySteps){\r\n                    newPos = (_value * this.model.valuePercent) - this.view.handlerSizePerc;\r\n                    this.view.handlersPositionPerc[i] = newPos + this.view.handlerSizePerc;\r\n                }\r\n                else {\r\n                    this.getNearestStepVal();\r\n                    newPos =  this.view.handlersPositionPerc[i] - this.view.handlerSizePerc; \r\n                }   \r\n                this.view.handlers[i].style.left = newPos + '%';\r\n            }\r\n\r\n            if (this.options.icon) {\r\n                this.view.icons[i].innerHTML = String(this.model.currentValue[i]);\r\n            }\r\n        }\r\n        this.model.getRangeValue();\r\n        if (this.options.rangeInput && this.options.range && this.options.handlersAmount > 1){\r\n            this.view.showRange();\r\n            this.view.rangeInput.value = String(this.model.rangeValue);  \r\n        }\r\n\r\n        if (this.options.rangeInput && !this.options.range && this.options.handlersAmount > 1){\r\n            this.view.rangeInput.value = `${this.model.currentValue[0]}; ${this.model.currentValue[1]}`;  \r\n        } \r\n                \r\n        if (this.options.valueInputs) {\r\n            for (let i = 0; i < this.options.handlersAmount; i++){\r\n                this.view.valueInputs[i].value = `${this.model.currentValue[i]}`; \r\n            }\r\n        } \r\n    } \r\n\r\n}\r\n  \r\n\r\n"]}